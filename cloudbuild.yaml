# https://cloud.google.com/architecture/managing-infrastructure-as-code

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


steps:
- id: 'branch name'
  name: 'alpine'
  entrypoint: 'sh'  
  args: 
  - '-c'
  - | 
      echo "***********************"
      echo "$BRANCH_NAME"
      echo "************************"

- id: 'Infra Tf init'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      if [ -d "gke/kubernetes-cluster/$BRANCH_NAME/" ]; then
        echo "$BRANCH_NAME"
        cd gke/kubernetes-cluster/$BRANCH_NAME
        terraform init
      else
        for dir in gke/kubernetes-cluster
        do 
          echo ${dir}
          cd ${dir}   
          env=${dir%/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init || exit 1
          cd ../../../
        done
      fi 

# [START tf-plan]
- id: 'Infra Tf plan'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "gke/kubernetes-cluster/$BRANCH_NAME/" ]; then
        cd gke/kubernetes-cluster/$BRANCH_NAME
        terraform plan
      else
        for dir in gke/kubernetes-cluster
        do 
          cd ${dir}   
          env=${dir%/}
          env=${env#/}  
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan || exit 1
          cd ../../../
        done
      fi 
# [END tf-plan]

# [START tf-apply]
- id: 'Infra Tf apply'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      if [ -d "gke/kubernetes-cluster/$BRANCH_NAME/" ]; then
        cd gke/kubernetes-cluster/$BRANCH_NAME      
        terraform apply -auto-approve
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
# [END tf-apply]
#- id: 'Build ibgateway ibc'
#  name: 'gcr.io/cloud-builders/docker'  
#  args: [ 'build', '-t', 'eu.gcr.io/$PROJECT_ID/ibc:latest',"./gke/ib-gateway/ibc"] 



# [END build ibgateway ibc]
#- id: 'Build ib-gateway-healthcheck'
#  name: 'gcr.io/cloud-builders/docker'  
#  args: [ 'build', '-t', 'eu.gcr.io/$PROJECT_ID/ib-gateway-healthcheck:latest',"./gke/ib-gateway/healthcheck"]

# Authorize Cloud Build to Access the Private Cluster (Enable Control Plane Authorized Networks)
#- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#  id: 'Authorize Cloud Build to Access the Private Cluster'
#  entrypoint: 'bash'
  # 
  # **** DOES NOT WORK, MY IP AUTHORIZATION  network  is not a reserved network, which is required for private endpoints
  # gcloud container clusters update ib-trading-$BRANCH_NAME --zone=europe-southwest1-a --enable-master-authorized-networks --master-authorized-networks $cloudbuild_external_ip/32 &&
  # WE LEAVE A LIKELY SECURITY BREACH 
#  args:
#    - -c
#    - |
#      apt-get install dnsutils -y &&
#      cloudbuild_external_ip=$(dig @resolver4.opendns.com myip.opendns.com +short) &&
#      gcloud container clusters update ib-trading-$BRANCH_NAME --zone=europe-southwest1-a --enable-master-authorized-networks --master-authorized-networks 0.0.0.0/0 &&  
#      echo $cloudbuild_external_ip

# Disable Control Plane Authorized Networks after Deployment
#  args:
#  id: 'Disable Authorized Networks'
#  entrypoint: 'gcloud'
 # args:
  #  - 'container'
   # - 'update'
    #- 'update'
    #- ib-trading-$BRANCH_NAME'
    #- '--zone=europe-southwest1-a'
    #- '--no-enable-master-authorized-networks'      


# CONFIGURE A TEMPORARY PROXY TO DEPLOY DEPLOYMENTS 
#- id: 'Build kubectl-proxy'
#  name: gcr.io/cloud-builders/docker
#  entrypoint: sh
#  args:
#  - -c
#  - docker run -d --net cloudbuild --name kubectl-proxy
#      gcr.io/cloud-builders/gcloud compute start-iap-tunnel
#      bastion-host-$BRANCH_NAME 8080 --local-host-port 0.0.0.0:8080 --zone europe-southwest1-a &&
#    sleep 5

- id: 'Temp proxy bastion host for Cloud Build'
  name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
  # args: ['gcloud', 'container', 'clusters', 'get-credentials', 'ib-trading-$BRANCH_NAME','--region','europe-southwest1-a']
  entrypoint: 'bash'
  args: ['-c',  echo "y" | apt purge --autoremove google-cloud-sdk && 
                curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-410.0.0-linux-x86_64.tar.gz && 
                mkdir google-cloud-sdk && tar -xzf google-cloud-sdk-* ./google-cloud-sdk && 
                gcloud components update && 
                gcloud components install kubectl  &&
                gcloud container clusters get-credentials --internal-ip ib-trading-$BRANCH_NAME  --region europe-southwest1-a &&
                gcloud compute ssh bastion-host-$BRANCH_NAME --tunnel-through-iap   --project=api-project-786272790820  --zone=europe-southwest1-a '--' -L8888:localhost:8888" 
          ]
  # args: ['gcloud', 'compute', 'ssh', 'bastion-host-$BRANCH_NAME', '--tunnel-through-iap','--project','api-project-786272790820','--zone','europe-southwest1-a','--region','europe-southwest1-a',
  #       '--','-L8888:localhost:8888']
  #entrypoint: 'bash'
  #args: 
  #- -c
  #- |
    #gcloud container clusters get-credentials ib-trading-$BRANCH_NAME  --region europe-southwest1-a &&
    #gcloud compute ssh bastion-host-$BRANCH_NAME --tunnel-through-iap   --project=api-project-786272790820  --zone=europe-southwest1-a '--' -L8888:localhost:8888

  #entrypoint: sh
  #args:
  #- -c
  #- gcloud container clusters get-credentials ib-trading-$BRANCH_NAME  --region europe-southwest1-a
  #  gcloud compute ssh bastion-host-$BRANCH_NAME --tunnel-through-iap   --project=api-project-786272790820  --zone=europe-southwest1-a '--' -L8888:localhost:8888


# Configure a kubectl workspace for this project
#- id: 'Deploy into cluster  ibgateway ibc'
#  name: gcr.io/cloud-builders/kubectl
#  entrypoint: sh
#  args:
#  - -c
#  - export HTTPS_PROXY=localhost:8888 
#    kubectl apply -f ./gke/ib-gateway/ib-gateway.yaml

#- id: 'Configure a kubectl'
#- name: eu.gcr.io/cloud-builders/kubectl
#  args:
#    - cluster-info
#  env:
#    - CLOUDSDK_COMPUTE_REGION=$_CUSTOM_REGION
#    - CLOUDSDK_CONTAINER_CLUSTER=$_CUSTOM_CLUSTER
#    - KUBECONFIG=/workspace/.kube/config

# Deploy with Helm 
#- id: 'deploy with Helm'
#- name: eu.gcr.io/$PROJECT_ID/helm
#  args:
#    - upgrade
#    - -i
#    - my-app
#    - ./kubernetes
#    - --set
#    - image.repository=eu.gcr.io/$PROJECT_ID/ibc:latest
#    - -f
#    - ./kubernetes/values.yaml
#  env:
#    - KUBECONFIG=/workspace/.kube/config
#    - TILLERLESS=false
#    - TILLER_NAMESPACE=kube-system

images: [eu.gcr.io/$PROJECT_ID/ibc:latest,eu.gcr.io/$PROJECT_ID/ib-gateway-healthcheck:latest]  

options:
  logging: CLOUD_LOGGING_ONLY
# substitutions:
#   _CUSTOM_REGION: europe-southwest-1
#   _CUSTOM_CLUSTER: ib-trading-$BRANCH_NAME  